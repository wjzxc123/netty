licon:
  animal:
    animal-type: cat
spring:
#  kafka:
#    bootstrap-servers: 127.0.0.1:9092
#    producer:
#      # 写入失败时，重试次数。当leader节点失效，一个replication节点会替代成为leader节点，此时可能出现写入失败，
#      # retries，produce不会重复。retries，此时replication节点完全成为leader节点，不会产生消息丢失。
#      retries: 1
#      # 每次批量发送消息的数量,produce积累到一定数据，一次发送
#      batch-size: 16384
#      # produce积累数据一次发送，缓存大小达到buffer.memory就发送数据
#      buffer-memory: 33554432
#      #procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
#      #acks = 0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
#      #acks = 1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
#      #acks = all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks = -1的设置。
#      #可以设置的值为：all, -1, 0, 1
#      acks: all
#      # 指定消息key和消息体的序列化编解码方式
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer
#      # 自定义分区器
#      properties:
#        partitioner:
#          class: com.lut.licon.netty.kafka.configure.CustomPartitioner
#      transaction-id-prefix: transaction
#    ###########【初始化消费者配置】###########
#    consumer:
#      properties:
#        group:
#          # 默认的消费组ID
#          id: defaultConsumerGroup
#          # 消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
#          session:
#            timeout: 120000ms
#          # 消费请求超时时间
#          request:
#            timeout: 180000ms
#          # 消费请求超时时间
#      # 是否自动提交offset
#      enable-auto-commit: true
#      # 提交offset延时(接收到消息后多久提交offset)
#      auto-commit-interval: 1000ms
#      # 当kafka中没有初始offset或offset超出范围时将自动重置offset
#      # earliest:重置为分区中最小的offset;
#      # latest:重置为分区中最新的offset(消费分区中新产生的数据);
#      # none:只要有一个分区不存在已提交的offset,就抛出异常;
#      auto-offset-reset: latest
#      # Kafka提供的序列化和反序列化类
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#      # 批量消费每次最多消费多少条消息
#      max-poll-records: 50
#    listener:
#      # 消费端监听的topic不存在时，项目启动会报错(关掉)
#      missing-topics-fatal: false
#      #设置批量消费
#      type: batch
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: root
    type: com.zaxxer.hikari.HikariDataSource
    url: jdbc:mysql://127.0.0.1:3306/domian?autoReconnect=true&useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=CONVERT_TO_NULL&useSSL=false&serverTimezone=CTT
  quartz:
    # 将任务等保存化到数据库
    job-store-type: jdbc
    # 程序结束时会等待quartz相关的内容结束
    wait-for-jobs-to-complete-on-shutdown: true
    # QuartzScheduler启动时更新己存在的Job,这样就不用每次修改targetObject后删除qrtz_job_details表对应记录
    overwrite-existing-jobs: true
    properties:
      org:
        quartz:
          # scheduler相关
          scheduler:
            # scheduler的实例名
            instanceName: scheduler
            instanceId: AUTO
          # 持久化相关
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # 表示数据库中相关表是QRTZ_开头的
            tablePrefix: QRTZ_
            useProperties: false
            # 配置集群
            # 是否加入集群
            isClustered: true
            # 容许的最大作业延长时间
            clusterCheckinInterval: 20000
          # 线程池相关
          threadPool:
            class: org.quartz.simpl.SimpleThreadPool
            # 线程数
            threadCount: 10
            # 线程优先级
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
  profiles:
    active: dev

mybatis:
  mapper-locations: classpath:com.lut.licon.netty/*.xml

pagehelper:
  params: pageNum=page;pageSize=pageSize;
  helper-dialect: mysql
  auto-dialect: true
  supportMethodsArguments: true

logging:
  level:
    com:
      lut:
        licon:
          netty: debug